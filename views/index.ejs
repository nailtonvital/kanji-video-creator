<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
    />
    <link rel="stylesheet" type="text/css" href="/style.css" />

    <title>Document</title>
  </head>
  <body>
    <div id="animation-area">
      <canvas class="demo-target" id="animation-target">
        <h2>国</h2>
      </canvas>
    </div>
    <div class="demo-controls">
      <form class="form-inline">
        <div class="checkbox">
          <label>
            <input
              type="checkbox"
              checked="checked"
              id="animation-show-outline"
            />
            Show Outline
          </label>
          <button class="btn btn-primary" id="animate-button">Animate!</button>
        </div>
      </form>
    </div>
    <script
      src="https://cdn.socket.io/4.5.4/socket.io.min.js"
      integrity="sha384-/KNQL8Nu5gCHLqwqfQjA689Hhoqgi2S84SNUxC3roTe4EhJ9AfLkp8QiQcU8AMzI"
      crossorigin="anonymous"
    ></script>
    <script type="text/javascript" src="/hanzi-writer.js"></script>
    <script type="text/javascript">
      var socket = io("http://localhost:3000");

      socket.on("connect", () => {
        console.log("connect");
      });

      socket.on("disconnect", () => {
        console.log("disconnect");
      });

      var writer = HanziWriter.create("animation-target", "国", {
        width: 400,
        height: 400,
        padding: 5,
        showOutline: true,
        strokeAnimationSpeed: 0.8,
        delayBetweenStrokes: 40,
        renderer: "canvas",
      });

      document
        .getElementById("animate-button")
        .addEventListener("click", function (e) {
          e.preventDefault();
          let timeDurationStart = performance.now();
          let timeDurationEnd;

          writer.animateCharacter({
            onComplete: function () {
              timeDurationEnd = performance.now();
              const timeTotal = timeDurationEnd - timeDurationStart;
              console.log("Animation complete! Duration: ", timeTotal, "ms");
              writer.animateCharacter();
              generateVideo(timeTotal);
            },
          });
          console.log("clicked");
        });

      const canvas = document.getElementById("animation-target");

      function record(canvas, time) {
        var recordedChunks = [];
        return new Promise(function (res, rej) {
          var stream;

          canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
          if (canvas.captureStream) {
            stream = canvas.captureStream(25 /*fps*/);
          } else if (canvas.mozCaptureStream) {
            stream = canvas.mozCaptureStream(25 /*fps*/);
          } else {
            rej("captureStream is not supported");
            return;
          }
          mediaRecorder = new MediaRecorder(stream, {
            mimeType: "video/webm; codecs=vp8",
          });

          //ondataavailable will fire in interval of `time || 4000 ms`
          mediaRecorder.start(time || 4000);

          mediaRecorder.ondataavailable = function (event) {
            recordedChunks.push(event.data);
            // after stop `dataavilable` event run one more time
            if (mediaRecorder.state === "recording") {
              mediaRecorder.stop();
            }
          };

          mediaRecorder.onstop = function (event) {
            var blob = new Blob(recordedChunks, { type: "video/webm" });
            var url = URL.createObjectURL(blob);
            res(url);
          };
        });
      }

      function generateVideo(time) {
        const canvas = document.getElementById("animation-target");

        const recording = record(canvas, time);
        // play it on another video element

        var video$ = document.createElement("video");
        video$.controls = true;
        const animationArea = document.getElementById("animation-area");
        animationArea.appendChild(video$);
        recording.then((url) => video$.setAttribute("src", url));

        // download it
        var link$ = document.createElement("a");
        link$.setAttribute("download", "recordingVideo");
        recording.then((url) => {
          console.log(url);
          socket.emit("video", {url});
          link$.setAttribute("href", url);
          //   link$.click();
        });
      }
    </script>
  </body>
</html>
